package edu.sjsu.cmpe202.test;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.Arrays;
import java.util.Base64;

import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;

import edu.sjsu.cmpe202.SCFParser;

public class SCFParserTest {

	private static String base64EncodedSampleSCF = "";
	private static Path tempSCFFile = null;
	
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		
		byte[] sampleSCFData = Base64.getDecoder().decode(base64EncodedSampleSCF);
		tempSCFFile = Files.createTempFile("tempSCFFile", ".tlv");
		Files.write(tempSCFFile, sampleSCFData, StandardOpenOption.WRITE);
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		if (tempSCFFile != null) {
			Files.delete(tempSCFFile);
		}
	}
	
	@Test
	public void testMain() {
		SCFParser.main(new String[]{tempSCFFile.toString()});
	}

	@Test
	public void testReadSCF() throws IOException {

		byte[] sampleSCFData = Base64.getDecoder().decode(base64EncodedSampleSCF);

		Path tempSCFFile = Files.createTempFile("tempSCFFile", ".tlv");

		Files.write(tempSCFFile, sampleSCFData, StandardOpenOption.WRITE);

		byte[] scfDataArray = SCFParser.readSCF(tempSCFFile.toString());

		Assert.assertArrayEquals(scfDataArray, sampleSCFData);
	}

	@Test
	public void testParseHeader() {

		byte[] sampleSCFData = Base64.getDecoder().decode(base64EncodedSampleSCF);
		SCFParser.parseHeader(Arrays.copyOfRange(sampleSCFData, 0, 315));
	}

	@Test
	public void testParseCertificates() {

		byte[] sampleSCFData = Base64.getDecoder().decode(base64EncodedSampleSCF);
		SCFParser.parseCertificates(Arrays.copyOfRange(sampleSCFData, 316, sampleSCFData.length));
	}

}
